<?php
if (!defined('_CAN_LOAD_FILES_'))
	exit;
	
class Paytm extends PaymentModule
{
	private	$_html = '';
	private $_postErrors = array();
	private $_responseReasonText = null;

	public function __construct(){
		$this->name = 'paytm';
		$this->tab = 'payments_gateways';
		$this->version = '2.5';
		$this->author = 'Paytm Development Team';
        parent::__construct();
		$this->page = basename(__FILE__, '.php');
        $this->displayName = $this->l('Paytm');
        $this->description = $this->l('Module for accepting payments by Paytm');
	}
	
	public function getPaytmUrl(){
		return Configuration::get('Paytm_GATEWAY_URL');
	}
	
	public function install(){
		if(parent::install()){
			Configuration::updateValue('PayTM_MERCHANT_ID', '');
            Configuration::updateValue('PayTM_SECRET_KEY', '');
            Configuration::updateValue('PayTM_MODE', '');
            Configuration::updateValue('PayTM_GATEWAY_URL', '');
            Configuration::updateValue('PayTM_MERCHANT_INDUSTRY_TYPE', '');
            Configuration::updateValue('PayTM_MERCHANT_CHANNEL_ID', '');
            Configuration::updateValue('PayTM_MERCHANT_WEBSITE', '');
            Configuration::updateValue('LOG', '');
            Configuration::updateValue('PayTM_ID_ORDER_SUCCESS', $sid);
            Configuration::updateValue('PayTM_ID_ORDER_FAILED', $fid);
			
			//Configuration::updateValue('ACCOUNT_ID', '');
			//Configuration::updateValue('SECRET_KEY', '');
			//Configuration::updateValue('MODE', '');
			$this->registerHook('payment');
			$this->registerHook('PaymentReturn');
			$this->registerHook('ShoppingCartExtra');
			if(!Configuration::get('Paytm_ORDER_STATE')){
				$this->setPaytmOrderState('Paytm_ID_ORDER_SUCCESS','Payment Received','#b5eaaa');
				$this->setPaytmOrderState('Paytm_ID_ORDER_FAILED','Payment Failed','#E77471');
				$this->setPaytmOrderState('Paytm_ID_ORDER_PENDING','Payment Pending','#F4E6C9');			
				Configuration::updateValue('Paytm_ORDER_STATE', '1');
			}		
			return true;
		}
		else {
			return false;
		}
	}
	
	public function uninstall(){
		if (!Configuration::deleteByName('PayTM_MERCHANT_ID') OR
			!Configuration::deleteByName('PayTM_SECRET_KEY') OR
			!Configuration::deleteByName('PayTM_MODE') OR
			!Configuration::deleteByName('PayTM_GATEWAY_URL') OR
			!Configuration::deleteByName('PayTM_MERCHANT_INDUSTRY_TYPE') OR
			!Configuration::deleteByName('PayTM_MERCHANT_CHANNEL_ID') OR
			!Configuration::deleteByName('PayTM_MERCHANT_WEBSITE') OR 
			!parent::uninstall()){
				return false;
		}	
		return true;
	}
	
	public function setPaytmOrderState($var_name,$status,$color){
		$orderState = new OrderState();
		$orderState->name = array();
		foreach(Language::getLanguages() AS $language){
			$orderState->name[$language['id_lang']] = $status;
		}
		$orderState->send_email = false;
		$orderState->color = $color;
		$orderState->hidden = false;
		$orderState->delivery = false;
		$orderState->logable = true;
		$orderState->invoice = true;
		if ($orderState->add())
			Configuration::updateValue($var_name, (int)$orderState->id);
		return true;
	}
	
	public function getContent() {
        $this->_html = '<h2>' . $this->displayName . '</h2>';
        if (isset($_POST['submitPayTM'])) {
            if (empty($_POST['merchant_id']))
                $this->_postErrors[] = $this->l('Please Enter your Merchant ID.');
            if (empty($_POST['secret_key']))
                $this->_postErrors[] = $this->l('Please Enter your Secret Key.');
            if (empty($_POST['gateway_url']))
                $this->_postErrors[] = $this->l('Please Enter PayTM Gatewau Url.');
            if (empty($_POST['industry_type']))
                $this->_postErrors[] = $this->l('Please Enter your Industry Type.');
            if (empty($_POST['channel_id']))
                $this->_postErrors[] = $this->l('Please Enter your Merchant Channel ID.');
            if (empty($_POST['website']))
                $this->_postErrors[] = $this->l('Please Enter your Website.');
            if (empty($_POST['mode']))
                $this->_postErrors[] = $this->l('Please Select the Mode, you want to work on .');

            if (!sizeof($this->_postErrors)) {
                Configuration::updateValue('PayTM_MERCHANT_ID', $_POST['merchant_id']);
                Configuration::updateValue('PayTM_SECRET_KEY', $_POST['secret_key']);
                Configuration::updateValue('PayTM_GATEWAY_URL', $_POST['gateway_url']);
                Configuration::updateValue('PayTM_MERCHANT_INDUSTRY_TYPE', $_POST['industry_type']);
                Configuration::updateValue('PayTM_MERCHANT_CHANNEL_ID', $_POST['channel_id']);
                Configuration::updateValue('PayTM_MERCHANT_WEBSITE', $_POST['website']);
                Configuration::updateValue('PayTM_MODE', $_POST['mode']);
                Configuration::updateValue('LOG', $_POST['log']);
                $this->displayConf();
            } else {
                $this->displayErrors();
            }
        }
        $this->displayPayTM();
        $this->displayFormSettings();
        return $this->_html;
    }
	
	public function displayConf(){
		$this->_html .= '
		<div class="conf confirm">
			<img src="../img/admin/ok.gif" alt="'.$this->l('Confirmation').'" />
			'.$this->l('Settings updated').'
		</div>';
	}
	
	public function displayErrors(){
		$nbErrors = sizeof($this->_postErrors);
		$this->_html .= '
		<div class="alert error">
			<h3>'.($nbErrors > 1 ? $this->l('There are') : $this->l('There is')).' '.$nbErrors.' '.($nbErrors > 1 ? $this->l('errors') : $this->l('error')).'</h3>
			<ol>';
		foreach ($this->_postErrors AS $error)
			$this->_html .= '<li>'.$error.'</li>';
		$this->_html .= '
			</ol>
		</div>';
	}
	
	public function _displayPaytm(){
		$this->_html .= '
		<img src="../modules/paytm/logo.png" style="float:left; padding: 0px; margin-right:15px;" />
		<b>'.$this->l('This module allows you to accept payments by Paytm.').'</b><br /><br />
		'.$this->l('If the client chooses this payment mode, your Paytm account will be automatically credited.').'<br />
		'.$this->l('You need to configure your Paytm account first before using this module.').'
		<br /><br /><br />';
	}
	
	 public function displayFormSettings() {

        $test = '';
        $live = '';
        $on = '';
        $off = '';
        $mode = Configuration::get('PayTM_MODE');
        $id = Configuration::get('PayTM_MERCHANT_ID');
        $key = Configuration::get('PayTM_SECRET_KEY');
        $url = Configuration::get('PayTM_GATEWAY_URL');
        $itype = Configuration::get('PayTM_MERCHANT_INDUSTRY_TYPE');
        $cid = Configuration::get('PayTM_MERCHANT_CHANNEL_ID');
        $site = Configuration::get('PayTM_MERCHANT_WEBSITE');
        $z_log = Configuration::get('LOG');

        if (!empty($id)) {
            $merchant_id = $id;
        } else {
            $merchant_id = '';
        }

        if (!empty($key)) {
            $secret_key = $key;
        } else {
            $secret_key = '';
        }
        
        if (!empty($url)) {
            $gateway_url = $url;
        } else {
            $gateway_url = '';
        }
        
        if (!empty($itype)) {
            $industry_type = $itype;
        } else {
            $industry_type = '';
        }
        
        if (!empty($cid)) {
            $channel_id = $cid;
        } else {
            $channel_id = '';
        }
        
        if (!empty($site)) {
            $website = $site;
        } else {
            $website = '';
        }

        if (!empty($mode)) {
            if ($mode == 'TEST') {
                $test = "selected='selected'";
                $live = '';
            }
            if ($mode == 'LIVE') {
                $live = "selected='selected'";
                $test = '';
            }
        } else {
            $live = '';
            $test = '';
        }

        if (!empty($z_log)) {
            if ($z_log == 'ON') {
                $on = "checked='checked'";
                $off = '';
            }
            if ($z_log == 'OFF') {
                $off = "checked='checked'";
                $on = '';
            }
        } else {
            $off = '';
            $on = "checked='checked'";
        }

        $this->_html .= '
		<form action="' . $_SERVER['REQUEST_URI'] . '" method="post">
			<fieldset>
			<legend><img src="../img/admin/contact.gif" />' . $this->l('Configuration Settings') . '</legend>
				<table border="0" width="500" cellpadding="0" cellspacing="0" id="form">
					<tr><td colspan="2">' . $this->l('Please specify the Merchant ID and Secret Key provided by PayTM.') . '<br /><br /></td></tr>
					<tr>
                                            <td width="130" style="height: 25px;">' . $this->l('PayTM Merchant ID') . '</td>
                                            <td><input type="text" name="merchant_id" value="' . $merchant_id . '" style="width: 170px;" /></td>
                                        </tr>
					<tr>
						<td width="130" style="height: 25px;">' . $this->l('PayTM Secret Key') . '</td>
						<td><input type="text" name="secret_key" value="' . $secret_key . '" style="width: 170px;" /></td>
					</tr>
                                        <tr>
                                            <td width="130" style="height: 25px;">' . $this->l('PayTM Gateway Url') . '</td>
                                            <td><input type="text" name="gateway_url" value="' . $gateway_url . '" style="width: 170px;" /></td>
                                        </tr>
                                        <tr>
                                            <td width="130" style="height: 25px;">' . $this->l('PayTM Merchant Industry Type') . '</td>
                                            <td><input type="text" name="industry_type" value="' . $industry_type . '" style="width: 170px;" /></td>
                                        </tr>
                                        <tr>
                                            <td width="130" style="height: 25px;">' . $this->l('PayTM Merchant Channel ID') . '</td>
                                            <td><input type="text" name="channel_id" value="' . $channel_id . '" style="width: 170px;" /></td>
                                        </tr>
                                        <tr>
                                            <td width="130" style="height: 25px;">' . $this->l('PayTM Merchant Website') . '</td>
                                            <td><input type="text" name="website" value="' . $website . '" style="width: 170px;" /></td>
                                        </tr>
					<tr>
						<td width="130" style="height: 25px;">' . $this->l('PayTM Mode') . '</td>
						<td>
							<select name="mode" style="width: 110px;">
								<option value="">-Select-</option>
								<option value="TEST" ' . $test . '>Sandbox(Test)</option>
								<option value="LIVE" ' . $live . '>Live</option>
							</select>
						</td>
					</tr>
					<tr><td colspan="2"><p class="hint clear" style="display: block; width: 350px;">' . $this->l('Select the Mode you want to work on.') . '</p></td></tr>
					<tr> </tr>
				    <tr>
						<td width="200" style="height: 25px; padding-top:20px;">' . $this->l('Log ( Logging Parameters passing through PayTM )') . '</td>
						<td>
							<input type="radio"  style="width: 110px;" name="log" value="ON" ' . $on . ' /> On </td><br /><br />
						<td> <input type="radio" name="log" value="OFF" ' . $off . ' /> Off </td></tr><br /><br />
					<tr><td colspan="2" align="center"><br /><input class="button" name="submitPayTM" value="' . $this->l('Update settings') . '" type="submit" /></td></tr>
				</table>
			</fieldset>
		</form>
		';
    }

	
	public function hookPayment($params){
		global $smarty;
		$smarty->assign(array(
	        'this_path' 		=> $this->_path,
	        'this_path_ssl' 	=> Configuration::get('PS_FO_PROTOCOL').$_SERVER['HTTP_HOST'].__PS_BASE_URI__."modules/{$this->name}/"));
	
		return $this->display(__FILE__, 'payment.tpl');
    }
	
	public function execPayment($cart){
		
		global $smarty, $cart;

        $countryarray = array(
        "IN" => "IND","DE" => "DEU","BR" => "BRA","DE" => "DEU","AT" => "AUT","BE" => "BEL","CA" => "CAN","CN" => "CHN","ES" => "ESP","FI" => "FIN","FR" => "FRA","GR" => "GRC","IT" => "ITA","JP" => "JPN","LU" => "LUX","NL" => "NLD","PL" => "POL","PT" => "PRT","CZ" => "CZE","GB" => "GBR","SE" => "SWE","CH" => "CHE","DK" => "DNK","US" => "USA","HK" => "HKG","NO" => "NOR","AU" => "AUS","SG" => "SGP","IE" => "IRL","NZ" => "NZL","KR" => "KOR","IL" => "ISR","ZA" => "ZAF","NG" => "NGA","CI" => "CIV","TG" => "TGO","BO" => "BOL","MU" => "MUS","RO" => "ROU","SK" => "SVK","DZ" => "DZA","AS" => "ASM","AD" => "AND","AO" => "AGO","AI" => "AIA","AG" => "ATG","AR" => "ARG","AM" => "ARM","AW" => "ARW","AZ" => "AZE","BS" => "BHS","BH" => "BHR","BD" => "BGD","BB" => "BRB","BY" => "BLR","BZ" => "BLZ","BJ" => "BEN","BM" => "BMU","BT" => "BTN","BW" => "BWA","BN" => "BRN","BF" => "BFA","MM" => "MMR","BI" => "BDI","KH" => "KHM","CM" => "CMR","CV" => "CPV","CF" => "CAF","TD" => "TCD","CL" => "CHL","CO" => "COL","KM" => "COM","CD" => "COD","CG" => "COG","CR" => "CRI","HR" => "HRV","CU" => "CUB","CY" => "CYP","DJ" => "DJI","DM" => "DMA","DO" => "DOM","TL" => "TLS","EC" => "ECU","EG" => "EGY","SV" => "SLV","GQ" => "GNQ","ER" => "ERI","EE" => "EST","ET" => "ETH","FK" => "FLK","FO" => "FRO","FJ" => "FJI","GA" => "GAB","GM" => "GMB","GE" => "GEO","GH" => "GHA","GD" => "GRD","GL" => "GRL","GI" => "GIB","GP" => "GLP","GU" => "GUM","GT" => "GTM","GG" => "GGY","GN" => "GIN","GP" => "GLP","GW" => "GNB","GY" => "GUY","HT" => "HTI","HM" => "HMD","VA" => "VAT","HN" => "HND","IS" => "ISL","ID" => "IDN","IR" => "IRN","IQ" => "IRQ","IM" => "IMN","JM" => "JAM","JE" => "JEY","JO" => "JOR","KZ" => "KAZ","KE" => "KEN","KI" => "KIR","KP" => "PRK","KW" => "KWT","KG" => "KGZ","LA" => "LAO","LV" => "LVA","LB" => "LBN","LS" => "LSO","LR" => "LBR","LS" => "LSO","LR" => "LBR","LY" => "LBY","LI" => "LIE","LT" => "LTU","MO" => "MAC","MK" => "MKD","MG" => "MDG","MW" => "MWI","MY" => "MYS","MV" => "MDV","ML" => "MLI","MT" => "MLT","MH" => "MHL","MQ" => "MTQ","MR" => "MRT","HU" => "HUN","YT" => "MYT","MX" => "MEX","FM" => "FSM","MD" => "MDA","MC" => "MCO","MN" => "MNG","ME" => "MNE","MS" => "MSR","MA" => "MAR","MZ" => "MOZ","NA" => "NAM","NR" => "NRU","NP" => "NPL","AN" => "ANT","NC" => "NCL","NI" => "NIC","NE" => "NER","NU" => "NIU","NF" => "NFK","MP" => "MNP","OM" => "OMN","PK" => "PAK","PW" => "PLW","PS" => "PSE","PA" => "PAN","PG" => "PNG","PY" => "PRY","PE" => "PER","PH" => "PHL","PN" => "PCN","PR" => "PRI","QA" => "QAT","RE" => "REU","RU" => "RUS","RW" => "RWA","BL" => "BLM","KN" => "KNA","LC" => "LCA","MF" => "MAF","PM" => "SPM","VC" => "VCT","WS" => "WSM","SM" => "SMR","ST" => "STP","SA" => "SAU","SN" => "SEN","RS" => "SRB","SC" => "SYC","SL" => "SLE","SI" => "SVN","SB" => "SLB","SO" => "SOM","GS" => "SGS","LK" => "LKA","SD" => "SDN","SR" => "SUR","SJ" => "SJM","SZ" => "SWZ","SY" => "SYR","TW" => "TWN","TJ" => "TJK","TZ" => "TZA","TH" => "THA","TK" => "TKL","TO" => "TON","TT" => "TTO","TN" => "TUN","TR" => "TUR","TM" => "TKM","TC" => "TCA","TV" => "TUV","UG" => "UGA","UA" => "UKR","AE" => "ARE","UY" => "URY","UZ" => "UZB","VU" => "VUT","VE" => "VEN","VN" => "VNM","VG" => "VGB","VI" => "VIR","WF" => "WLF","EH" => "ESH","YE" => "YEM","ZM" => "ZMB","ZW" => "ZWE","AL" => "ALB","AF" => "AFG","AQ" => "ATA","BA" => "BIH","BV" => "BVT","IO" => "IOT","BG" => "BGR","KY" => "CYM","CX" => "CXR","CC" => "CCK","CK" => "COK","GF" => "GUF","PF" => "PYF","TF" => "ATF","AX" => "ALA"
        );
        $bill_address = new Address(intval($params['cart']->id_address_invoice));
        $ship_address = new Address(intval($params['cart']->id_address_delivery));

        $customer = new Customer(intval($params['cart']->id_customer));
        $merchant_id = Configuration::get('PayTM_MERCHANT_ID');
        $secret_key = Configuration::get('PayTM_SECRET_KEY');
        $log = Configuration::get('LOG');
        $mode = Configuration::get('PayTM_MODE');
        $mod = $mode;
        if ($mod == "TEST")
            $mode = 0;
        else
            $mode = 1;

        $id_currency = intval(Configuration::get('PS_CURRENCY_DEFAULT'));
        $currency = new Currency((int) ($id_currency));
        $iso_currency = $currency->iso_code;
        $first_name = $bill_address->firstname;
        $last_name = $bill_address->lastname;
        //$name = $first_name." ".$last_name;
        $address1 = $bill_address->address1;
        $address2 = $bill_address->address2;
        $address = $address1 . " " . $address2;
        $city = $bill_address->city;
        $countryiso2 = new Country(intval($bill_address->id_country));
        $countryiso2->iso_code = $countryarray[$countryiso2->iso_code];
        $country = $countryiso2->iso_code;
        $state_obj = new State($bill_address->id_state);
        $state = $state_obj->name;
        if ($bill_address->phone != null) {
            $phone = $bill_address->phone;
        } else {
            $phone = $bill_address->phone_mobile;
        }
        $postal_code = $bill_address->postcode;
        $email = $customer->email;

        $ship_first_name = $ship_address->firstname;
        $ship_last_name = $ship_address->lastname;
        $ship_address1 = $ship_address->address1;
        $ship_address2 = $ship_address->address2;
        $ship_addr = $ship_address1 . " " . $ship_address2;
        $ship_city = $ship_address->city;
        $ship_countryiso2 = new Country(intval($ship_address->id_country));
        $ship_countryiso2->iso_code = $countryarray[$ship_countryiso2->iso_code];
        $ship_country = $ship_countryiso2->iso_code;
        $ship_state_obj = new State($ship_address->id_state);
        $ship_state = $state_obj->name;
        if ($ship_address->phone != null) {
            $ship_phone = $ship_address->phone;
        } else {
            $ship_phone = $ship_address->phone_mobile;
        }
        $ship_postal_code = $ship_address->postcode;


		
		
		if (!Validate::isLoadedObject($bill_address) OR !Validate::isLoadedObject($customer))
			return $this->l('Paytm error: (invalid address or customer)');
		
		$amount = $cart->getOrderTotal(true,Cart::BOTH);
		$ref_no = intval($cart->id);	
		//$return_url = 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/paytm/response.php?DR={DR}&cart_id='.intval($cart->id);
		$hash = $secret_key ."|". $account_id. "|". $amount . "|".$ref_no."|".html_entity_decode($return_url)."|". $mode;
		$securehash = md5($hash);
		$reference_no = intval($cart->id);
		$description = "Order ID is ".$reference_no;

		
        $date = date('Y-m-d');
        
        $industry_type = Configuration::get('PayTM_MERCHANT_INDUSTRY_TYPE');
        $channel_id = Configuration::get('PayTM_MERCHANT_CHANNEL_ID');
        $website = Configuration::get('PayTM_MERCHANT_WEBSITE');
		
		 $post_variables = Array(
            "MID" => $merchant_id,
            "ORDER_ID" => $params['cart']->id,
            "CUST_ID" => $params['cart']->id_customer,
            "TXN_AMOUNT" => $amount,
            "CHANNEL_ID" => $channel_id,
            "INDUSTRY_TYPE_ID" => $industry_type,
            "WEBSITE" => $website
        );

        $checksum = getChecksumFromArray($post_variables, $secret_key);

		$smarty->assign(array(
            'merchant_id' => $merchant_id,
            'PayTMUrl' => $this->getPayTMUrl(),
            'date' => $date,
            'amount' => $amount,
            'id_cart' => intval($params['cart']->id),
            'WEBSITE' => $website,
            'INDUSTRY_TYPE_ID' => $industry_type,
            'CHANNEL_ID' => $channel_id,
            'CUST_ID' => $params['cart']->id_customer,
            'checksum' => $checksum,
            'this_path' => $this->_path
        ));
		return $this->display(__FILE__, 'payment_execution.tpl');
    }
}
?>
